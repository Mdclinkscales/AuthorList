{"version":3,"sources":["components/DeleteButton.js","components/AuthorList.js","views/Main.js","components/Cancelbutton.js","components/AuthorAdd.js","views/New.js","views/Update.js","App.js","serviceWorker.js","index.js"],"names":["props","authorID","successCallback","onClick","e","axios","delete","then","res","useState","authors","setAuthors","useEffect","get","data","map","author","index","className","key","to","_id","name","DeleteButton","filter","loaded","setLoaded","href","AuthorList","removeFromDom","linkvalue","navigate","initialName","onSubmitProp","editstring","setName","Cancelbutton","onSubmit","preventDefault","type","value","onChange","target","AuthorAdd","post","console","log","id","setAuthor","put","App","Main","path","New","Update","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8274112b.chunk.js","sourcesContent":["import React from 'react'\r\nimport axios from 'axios'\r\nexport default props => {\r\n    const { authorID, successCallback} = props;\r\n    const deleteAuthor = e => {\r\n        axios.delete('http://localhost:8000/api/authors'+authorID)\r\n            .then(res=>{\r\n                successCallback();\r\n            })\r\n    }\r\n    return(\r\n        <button onClick={deleteAuthor}>\r\n            Delete\r\n        </button>\r\n    )\r\n}","import React, {useEffect, useState} from 'react'\r\nimport {Link} from '@reach/router'\r\nimport axios from 'axios'\r\nimport DeleteButton from '../components/DeleteButton'\r\n\r\nexport default props => {\r\n    const [authors, setAuthors] = useState([])\r\n    useEffect(()=>{\r\n        axios.get('http://localhost:8000/api/authors')\r\n            .then(res=>setAuthors(res.data));\r\n    }, [])\r\n    const removeFromDom = authorID=>{\r\n        setAuthors(authors.filter(author=>author._id!==authorID))\r\n    }\r\n    return (\r\n        <div>\r\n            {props.authors.map((author, index)=>{\r\n                return <div className={index%2===0?\"bg-light\":\"bg-dark text-light\"} key={index}>\r\n                    <Link to={\"/authors/\"+author._id}>\r\n                        {author.name}\r\n                    </Link>\r\n                    |\r\n                    <Link to={\"/authors/\"+author._id+\"/edit\"}>\r\n                        <button>Edit</button>\r\n                    </Link>\r\n                    <DeleteButton authorID={author._id} successCallback={ ()=>removeFromDom(author._id)}/>\r\n                </div>\r\n            })}\r\n        </div>\r\n    )\r\n}","import React, { useState, useEffect } from \"react\"\r\nimport axios from 'axios'\r\nimport AuthorList from \"../components/AuthorList\";\r\n\r\nexport default () =>{\r\n    const [authors, setAuthors] = useState([]);\r\n    const [loaded, setLoaded] = useState(false);\r\n\r\n    useEffect(()=>{\r\n        axios.get('http://localhost:8000/api/authors')\r\n            .then(res=>{\r\n                setAuthors(res.data)\r\n                setLoaded(true);\r\n            })\r\n    }, []);\r\n\r\n    const removeFromDom = authorID =>{\r\n        setAuthors(authors.filter(author=>author._id!==authorID));\r\n    }\r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"col-sm-4\"/>\r\n            <div className=\"col-sm-4\">\r\n                <h1>Favorite Authors</h1>\r\n                <a href=\"http://localhost:3000/new\">Add an Author</a>\r\n                {loaded && <AuthorList authors={authors} removeFromDom={removeFromDom}/>}\r\n            </div>\r\n            <div className=\"col-sm-4\"/>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport {navigate} from '@reach/router'\r\n\r\nexport default props =>{\r\n    const {linkvalue} = props;\r\n    const cancelAction = e => {\r\n        navigate('/')\r\n    }\r\n    return(\r\n        <button className=\"btn-light btn-inline-block\" onClick={cancelAction}>\r\n            {linkvalue}\r\n        </button>\r\n    )\r\n}","import React, {useState} from 'react'\r\nimport { navigate } from '@reach/router'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport Cancelbutton from './Cancelbutton';\r\n\r\nexport default props =>{\r\n    const { initialName, onSubmitProp, editstring } = props;\r\n    const [name, setName] = useState(initialName);\r\n\r\n    const onSubmitHandler = e => {\r\n        e.preventDefault();\r\n        onSubmitProp({name});\r\n        navigate('/')\r\n    }\r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"col-sm-4\"/>\r\n            <div className=\"col-sm-4\">\r\n                <div className=\"text-center\">\r\n                    <h1>Favorite Authors</h1>\r\n                    <Cancelbutton  linkvalue=\"Home\"/>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <h4>{editstring}</h4>\r\n                    <form onSubmit={onSubmitHandler}>\r\n                        <label>Name:</label>\r\n                        <input\r\n                            className=\"form-control\"\r\n                            type=\"text\"\r\n                            name=\"name\"\r\n                            value={name}\r\n                            onChange={e=>setName(e.target.value)}\r\n                        />\r\n                        <input className=\"btn-light\" type=\"submit\"/>\r\n                        <Cancelbutton \r\n                            linkvalue=\"Cancel\"\r\n                        />\r\n                    </form>\r\n                </div>\r\n            </div>\r\n            <div className=\"col-sm-4\"/>\r\n        </div>\r\n    )\r\n}","import React, {useEffect, useState} from 'react'\r\nimport axios from 'axios';\r\nimport AuthorAdd from '../components/AuthorAdd'\r\nexport default () => {\r\n    const [loaded, setLoaded] = useState(false);\r\n\r\n    useEffect(()=>{\r\n        setLoaded(true);\r\n    }, []);\r\n    const newAuthor = author => {\r\n        axios.post('http://localhost:8000/api/authors', author)\r\n            .then(res=>{\r\n                console.log(res)\r\n            })\r\n    }\r\n    return(\r\n        <div className=\"jumbotron\">\r\n            {loaded && (\r\n                <AuthorAdd \r\n                initialName=\"\" \r\n                onSubmitProp = {newAuthor}\r\n                editstring=\"Add a new author\"\r\n                />\r\n            )}\r\n        </div>\r\n    )\r\n}","import React, {useEffect, useState} from 'react'\r\nimport axios from 'axios';\r\nimport AuthorAdd from '../components/AuthorAdd'\r\nexport default props => {\r\n    const {id} = props\r\n    const [author, setAuthor] = useState();\r\n    const [loaded, setLoaded] = useState(false);\r\n    useEffect(()=>{\r\n        axios.get('http://localhost:8000/api/authors/'+id)\r\n            .then(res=>{\r\n                setAuthor(res.data);\r\n                setLoaded(true)\r\n            })\r\n    }, []);\r\n\r\n    const updateAuthor = author => {\r\n        axios.put('http://localhost:8000/api/authors', author)\r\n            .then(res=>{console.log(res)})\r\n    }\r\n    return(\r\n        <div className=\"jumbotron\">\r\n            {loaded && (\r\n                <AuthorAdd \r\n                initialName={author.name} \r\n                onSubmitProp={updateAuthor}\r\n                editstring=\"Edit this author:\"\r\n                />\r\n            )}\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport {Router} from '@reach/router'\nimport './App.css';\nimport Main from './views/Main'\nimport New from './views/New';\nimport Update from './views/Update';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Main path=\"/\"/>\n        <New path=\"/new\"/>\n        <Update path=\"authors/:id/edit\"/>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}